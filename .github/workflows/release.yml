name: Elixir CI
on:
  release:
    types: [published]
  push:
    branches:
      - main

env:
  RUST_TOOLCHAIN_VERSION: nightly-2022-08-16
  MIX_ENV: prod
  NETCDF_BUILD: true
  HDF5_DIR: /usr/local/lib/hdf5
  H5_PRINTF_LL_TEST_RUN: false
  H5_PRINTF_LL_TEST_RUN__TRYRUN_OUTPUT: false
  H5_LDOUBLE_TO_LONG_SPECIAL_RUN: false
  H5_LDOUBLE_TO_LONG_SPECIAL_RUN__TRYRUN_OUTPUT: false
  H5_LONG_TO_LDOUBLE_SPECIAL_RUN: false
  H5_LONG_TO_LDOUBLE_SPECIAL_RUN__TRYRUN_OUTPUT: false
  H5_LDOUBLE_TO_LLONG_ACCURATE_RUN: false
  H5_LDOUBLE_TO_LLONG_ACCURATE_RUN__TRYRUN_OUTPUT: false
  H5_LLONG_TO_LDOUBLE_CORRECT_RUN: false
  H5_LLONG_TO_LDOUBLE_CORRECT_RUN__TRYRUN_OUTPUT: false
  H5_DISABLE_SOME_LDOUBLE_CONV_RUN: false
  H5_DISABLE_SOME_LDOUBLE_CONV_RUN__TRYRUN_OUTPUT: false
  H5_NO_ALIGNMENT_RESTRICTIONS_RUN: false
  H5_NO_ALIGNMENT_RESTRICTIONS_RUN__TRYRUN_OUTPUT: false

jobs:
  build_release:
    name: Release NetCDF NIF ${{ matrix.nif }} - ${{ matrix.job.target }}
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        nif: ["2.15", "2.16"]
        job:
          - {
              target: arm-unknown-linux-gnueabihf,
              os: ubuntu-20.04,
              use-cross: true,
              manual-hdf5: true
            }
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-20.04,
              use-cross: true,
              manual-hdf5: true
            }
          - { target: aarch64-apple-darwin, os: macos-11 }
          - { target: x86_64-apple-darwin, os: macos-11 }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-20.04 }
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Extract project version
        shell: bash
        run: |
          # Get the project version from mix.exs
          echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' mix.exs | head -n1)" >> $GITHUB_ENV
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
      - name: Install dependencies (Linux x86)
        if: ${{ matrix.job.os == 'ubuntu-20.04' && !matrix.job.manual-hdf5 }}
        run: sudo apt install -y libhdf5-serial-dev libnetcdf-dev
      - name: Install dependencies (Linux aarch64)
        if: ${{ matrix.job.os == 'ubuntu-20.04' && matrix.job.manual-hdf5 }}
        run: |
          sudo apt install -y libnetcdf-dev
          wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.9/src/hdf5-1.10.9.tar.gz
          gzip -cd hdf5-1.10.9.tar.gz | tar xvf -
          cd hdf5-1.10.9
          ./configure --prefix=/usr/local/lib/hdf5 --enable-cxx
          make
          make install
          echo "HDF5_DIR=/usr/local/lib/hdf5" >> $GITHUB_ENV
      - name: Install dependencies (macOS)
        if: ${{ matrix.job.os == 'macos-11'}}
        run: brew install netcdf-cxx
      - name: Build the project
        id: build-crate
        uses: philss/rustler-precompiled-action@v1.0.0
        with:
          project-name: ex_netcdf
          project-version: ${{ env.PROJECT_VERSION }}
          target: ${{ matrix.job.target }}
          nif-version: ${{ matrix.nif }}
          use-cross: ${{ matrix.job.use-cross }}
          project-dir: "native/ex_netcdf"
      - name: Artifact upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build-crate.outputs.file-name }}
          path: ${{ steps.build-crate.outputs.file-path }}
      - name: Publish archives and packages
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.build-crate.outputs.file-path }}
        if: startsWith(github.ref, 'refs/tags/')
